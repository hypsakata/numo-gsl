[["GSL_IS_EVEN (n)",
  "This macro is the opposite of :macro:`GSL_IS_ODD`. It evaluates to 1 if :data:`n` is even and 0 if :data:`n` is odd. The argument :data:`n` must be of integer type. "],
 ["GSL_IS_ODD (n)",
  "This macro evaluates to 1 if :data:`n` is odd and 0 if :data:`n` is even. The argument :data:`n` must be of integer type. "],
 ["GSL_MAX (a, b)",
  "This macro returns the maximum of :data:`a` and :data:`b`. It is defined as :code:`((a) > (b) ? (a):(b))`. "],
 ["GSL_MIN (a, b)",
  "This macro returns the minimum of :data:`a` and :data:`b`. It is defined as :code:`((a) < (b) ? (a):(b))`. "],
 ["GSL_MODE_DEFAULT", nil],
 ["GSL_NAN",
  "This macro contains the IEEE representation of the Not-a-Number symbol, :code:`NaN`. It is computed from the ratio :code:`0.0/0.0`. "],
 ["GSL_NEGINF",
  "This macro contains the IEEE representation of negative infinity, -\\infty. It is computed from the expression :code:`-1.0/0.0`. "],
 ["GSL_POSINF",
  "This macro contains the IEEE representation of positive infinity, +\\infty. It is computed from the expression :code:`+1.0/0.0`. "],
 ["GSL_PREC_APPROX", nil],
 ["GSL_PREC_DOUBLE", nil],
 ["GSL_PREC_SINGLE", nil],
 ["GSL_SIGN (x)",
  "This macro returns the sign of :data:`x`. It is defined as :code:`((x) >= 0 ? 1 : -1)`. Note that with this definition the sign of zero is positive (regardless of its IEEE sign bit). "]]
